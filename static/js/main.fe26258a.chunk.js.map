{"version":3,"sources":["TodolistTitle.tsx","api/api.ts","redux/reducer.ts","ui/AddNewIntemForm.tsx","OneTask.tsx","ShowTasks.tsx","Footer.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["TodolistTitle","state","isVisible","updateTodoTitle","e","props","changeTodoTitle","idTodo","currentTarget","value","setTodoTitle","title","setState","className","this","onChange","autoFocus","onBlur","onDoubleClick","onClick","deleteTodolist","React","Component","instance","require","create","withCredentials","baseURL","headers","todoAPI","get","newTodoTitle","post","id","delete","put","tasksAPI","todoId","newTask","taskId","task","initialState","todolists","filterValue","addTodolistAC","newTodolist","type","deleteTodolistAC","setTasksAC","tasks","addTaskAC","deleteTaskAc","changeTaskAC","reducer","action","nextTodo","map","tl","filter","t","AddNewIntemForm","addItem","nameValue","OneTask","priority","setChangeTask","changeTaskInTodolist","idTask","updateTaskInTodolist","changeStatus","checked","status","idx","key","deleteTask","ShowTasks","Footer","changeFilterValue","Todolist","updateTodolistTitleServer","updateTodolistTitleLocal","dellTodo","addNewTask","addTaskInTodolist","setTaskInCurrentTodoServer","newTitleTask","updateTaskLocal","newFilterValue","changeFilter","setTasks","ConnectedApp","connect","todo","dispatch","idTodolist","a","then","response","data","items","getTasksThunk","deleteTodolistThunk","changeTodolistTitleThunk","changeTodoTitleAC","item","deleteTaskThunk","changeTaskThunk","changeFilterValueAC","App","addNewTodo","newTitle","addTodo","getTodolists","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe26258a.chunk.js","sourcesContent":["import React,{ChangeEvent} from 'react';\r\n\r\ninterface IProps{\r\n    idTodo:string,\r\n    title:string,\r\n    deleteTodolist:(value:string)=>void,\r\n    changeTodoTitle:(idTodo:string,title:string)=>void,\r\n    updateTodoTitle:(idTodo:string,title:string)=>void\r\n\r\n\r\n}\r\ninterface IState{\r\n    isVisible:boolean\r\n}\r\nclass TodolistTitle extends React.Component<IProps,IState> {\r\n    state = {\r\n        isVisible: false\r\n    }\r\n\r\n    updateTodoTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.props.changeTodoTitle(this.props.idTodo, e.currentTarget.value)\r\n    }\r\n    setTodoTitle = () => {\r\n        this.props.updateTodoTitle(this.props.idTodo, this.props.title)\r\n        this.setState({isVisible: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"TodoTitle\">\r\n                {this.state.isVisible ?\r\n                    <div ><input\r\n                        onChange={this.updateTodoTitle}\r\n                        autoFocus={true}\r\n                        onBlur={this.setTodoTitle} value={this.props.title}/></div>\r\n                    : <div onDoubleClick={() => this.setState({isVisible: true})}>{this.props.title}\r\n                        <button onClick={() => this.props.deleteTodolist(this.props.idTodo)}>x</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodolistTitle","import {ITasks} from \"../types\";\r\nimport {\r\n    IDeleteResponce,\r\n    IDeleteTaskResponce, IResponceAddDotolist, IResponceAddTaskAction, IResponceChangeTaskAction, IResponceSetDotolist,\r\n    IResponceTaskAction\r\n} from \"../redux/reducer\";\r\nconst axios = require('axios');\r\n\r\ninterface IInstanceControll{\r\n    withCredentials:boolean,\r\n    baseURL:string,\r\n    headers:object,\r\n    get:(url:string)=>void,\r\n    post:(url:string,data:object)=>void,\r\n    delete:(url:string)=>void,\r\n    put:(url:string,data:object)=>void\r\n\r\n}\r\nconst instance:IInstanceControll = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    headers: {\"API-KEY\": \"ec13c7fa-bf13-4b56-aa9c-409a1e523851\"}\r\n\r\n});\r\ninterface ITodolistControll{\r\n    getTodolist:()=>Promise<IResponceSetDotolist>,\r\n    addTodolist:(newTodoTitle:string)=>Promise<IResponceAddDotolist>,\r\n    deleteTodolist:(id:string)=>Promise<IDeleteResponce>,\r\n    updateTodolist:(id:string, title:string)=>void\r\n}\r\n\r\nexport const todoAPI:ITodolistControll = <ITodolistControll>{\r\n    getTodolist(){\r\n        return instance.get(`todo-lists`);\r\n    },\r\n    addTodolist(newTodoTitle){\r\n        return instance.post(`todo-lists`, {title: newTodoTitle});\r\n    },\r\n    deleteTodolist(id){\r\n        return instance.delete(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id, title){\r\n        return instance.put(`todo-lists/${id}`, {title: title});\r\n    }\r\n}\r\ninterface ITaskControll{\r\n    getTasks:(todoId:string)=>Promise<IResponceTaskAction>,\r\n    addTask:(todoId:string,newTask:string)=>Promise<IResponceAddTaskAction>,\r\n    deleteTask:(todoId:string,taskId:string)=>Promise<IDeleteTaskResponce>,\r\n    updateTask:(todoId:string, taskId:string, task:ITasks)=>Promise<IResponceChangeTaskAction>\r\n}\r\n\r\nexport const tasksAPI:ITaskControll = <ITaskControll>{\r\n    getTasks(todoId){\r\n        return instance.get(`todo-lists/${todoId}/tasks`);\r\n    },\r\n    addTask(todoId, newTask){\r\n        return instance.post(`todo-lists/${todoId}/tasks`, {title: newTask});\r\n    },\r\n    deleteTask(todoId, taskId){\r\n        return instance.delete(`todo-lists/${todoId}/tasks/${taskId}`);\r\n    },\r\n    updateTask(todoId, taskId, task: ITasks){\r\n        return instance.put(`todo-lists/${todoId}/tasks/${taskId}`, task);\r\n    }\r\n}\r\n","import {ITasks, ITodolist} from \"../types\";\r\nimport {tasksAPI, todoAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nconst SET_TODOLIST = \"SET_TODOLIST\";\r\nconst ADD_TODOLIST = \"ADD_TODOLIST\";\r\nconst DELL_TODOLIST = \"DELL_TODOLIST\";\r\nconst CHANGE_TODO_TITLE = \"CHANGE_TODO_TITLE\";\r\nconst SET_TASKS = \"SET_TASKS\";\r\nconst ADD_TASK = \"ADD_TASK\";\r\nconst DELL_TASK = \"DELL_TASK\";\r\nconst CHANGE_TASK = \"CHANGE_TASK\";\r\nconst CHANGE_FILTER = \"CHANGE_FILTER\";\r\n\r\n\r\ninterface IInitialState {\r\n    todolists: Array<ITodolist>,\r\n    filterValue: string\r\n}\r\nlet initialState = {\r\n    todolists: [],\r\n    filterValue: 'All'\r\n}\r\n\r\nconst reducer = (state: IInitialState = initialState, action: TodolistReducerActionsTypes): IInitialState => {\r\n    switch (action.type) {\r\n        case SET_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todolists: action.nextTodo.map((tl: ITodolist) => {\r\n                    return {...tl, tasks: []}\r\n                })\r\n            }\r\n        }\r\n        case ADD_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, {...action.newTodolist, tasks: []}]\r\n            }\r\n        }\r\n        case DELL_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(t => {\r\n                    return t.id !== action.idTodo\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_TODO_TITLE: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.idTodo) {\r\n                        return {...tl, title: action.title}\r\n                    } else return tl\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todoId) {\r\n                        return {...tl, tasks: [...action.tasks]}\r\n                    } else return tl\r\n                })\r\n            }\r\n        }\r\n\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todoId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: [...tl.tasks, {...action.task}]\r\n                        }\r\n                    } else return tl\r\n                })\r\n            }\r\n        }\r\n        case DELL_TASK: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todoId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => {\r\n                                return t.id !== action.taskId\r\n                            })\r\n                        }\r\n                    }\r\n                    return tl\r\n                })\r\n            }\r\n        }\r\n\r\n        case CHANGE_TASK: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todoId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: [...tl.tasks.map(task => {\r\n                                if (task.id === action.taskId) {\r\n                                    return {\r\n                                        ...task, ...action.task\r\n                                    }\r\n                                }\r\n                                return task\r\n                            })]\r\n                        }\r\n                    } else return tl\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_FILTER: {\r\n            return {\r\n                ...state,\r\n                filterValue: action.filter\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return state;\r\n}\r\ntype TodolistReducerActionsTypes =\r\n    ISetTodolistAction\r\n    | IAddTodolistAction\r\n    | IDeleteTodolistAction\r\n    | IChangeTodolistAction\r\n    | ISetTaskAction\r\n    | IAddTaskAction\r\n    | IDeleteTaskAction\r\n    | IChangeTaskAction\r\n    | IChangeFilter;\r\n\r\n\r\nexport interface ISetTodolistAction {\r\n    type: typeof SET_TODOLIST\r\n    nextTodo: Array<ITodolist>\r\n}\r\nexport interface IResponceSetDotolist {\r\n    data: Array<ITodolist>\r\n    status: string\r\n    statusText: string\r\n    headers: any\r\n    config: any\r\n    request: any\r\n}\r\n\r\nexport const setTodolistAC = (nextTodo: Array<ITodolist>): ISetTodolistAction => ({type: SET_TODOLIST, nextTodo})\r\nexport const setTodolistThunk = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        await todoAPI.getTodolist().then((response: IResponceSetDotolist) => {\r\n            dispatch(setTodolistAC(response.data))\r\n\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport interface IAddTodolistAction {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolist: INewTodolist\r\n}\r\nexport interface IResponceAddDotolist {\r\n    data: {\r\n        data: {\r\n            item: {\r\n                id: string;\r\n                addedDate: string;\r\n                order: number;\r\n                title: string;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport interface INewTodolist {\r\n    id: string;\r\n    addedDate: string;\r\n    order: number;\r\n    title: string;\r\n}\r\n\r\nexport const addTodolistThunk = (newTodoTitle: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await todoAPI.addTodolist(newTodoTitle).then((response: IResponceAddDotolist) => {\r\n            dispatch(addTodolistAC(response.data.data.item))\r\n        })\r\n    }\r\n}\r\nexport const addTodolistAC = (newTodolist: INewTodolist): IAddTodolistAction => ({type: ADD_TODOLIST, newTodolist});\r\n\r\n\r\nexport interface IDeleteTodolistAction {\r\n    type: typeof DELL_TODOLIST\r\n    idTodo: string\r\n}\r\n\r\nexport interface IDeleteResponce {\r\n    data: {\r\n        data: object\r\n        messages: Array<string>\r\n        resultCode: number\r\n        status: number\r\n        statusText: string\r\n        headers: any\r\n        config: any\r\n        request: any\r\n    }\r\n}\r\n\r\nexport const deleteTodolistThunk = (id: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await todoAPI.deleteTodolist(id).then((response: IDeleteResponce) => {\r\n            dispatch(deleteTodolistAC(id))\r\n        })\r\n    }\r\n}\r\nexport const deleteTodolistAC = (idTodo: string) => ({type: DELL_TODOLIST, idTodo});\r\n\r\n\r\nexport interface IChangeTodolistAction {\r\n    type: typeof CHANGE_TODO_TITLE\r\n    idTodo: string,\r\n    title: string\r\n}\r\n\r\nexport const changeTodolistTitleThunk = (id: string, title: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await todoAPI.updateTodolist(id, title);\r\n    }\r\n}\r\nexport const changeTodoTitleAC = (idTodo: string, title: string): IChangeTodolistAction => ({\r\n    type: CHANGE_TODO_TITLE,\r\n    idTodo,\r\n    title\r\n});\r\n\r\nexport interface IResponceTaskAction {\r\n    data: {\r\n        items: Array<ITasks>\r\n        totalCount: number,\r\n        error: string\r\n    }\r\n\r\n}\r\nexport interface ISetTaskAction {\r\n    type: typeof SET_TASKS,\r\n    todoId: string\r\n    tasks: Array<ITasks>\r\n}\r\nexport const getTasksThunk = (idTodolist: string, tasks: Array<ITasks>) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await tasksAPI.getTasks(idTodolist).then((response: IResponceTaskAction) => {\r\n            dispatch(setTasksAC(idTodolist, response.data.items))\r\n        })\r\n    }\r\n}\r\nexport const setTasksAC = (todoId: string, tasks: Array<ITasks>): ISetTaskAction => ({type: SET_TASKS, todoId, tasks});\r\n\r\n\r\nexport interface IAddTaskAction {\r\n    type: typeof ADD_TASK,\r\n    todoId: string\r\n    task: ITasks\r\n}\r\n\r\nexport interface IResponceAddTaskAction {\r\n    data: {\r\n        data: {\r\n            item: ITasks\r\n        }\r\n    }\r\n    messages: Array<string>,\r\n    resultCode: number\r\n    headers: any,\r\n    config: any\r\n    request: any\r\n}\r\n\r\nexport const addTasksThunk = (idTodolist: string, newTask: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await tasksAPI.addTask(idTodolist, newTask).then((response: IResponceAddTaskAction) => {\r\n            dispatch(addTaskAC(idTodolist, response.data.data.item))\r\n        })\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (todoId: string, task: ITasks): IAddTaskAction => ({type: ADD_TASK, todoId, task});\r\n\r\n\r\nexport interface IDeleteTaskAction {\r\n    type: typeof DELL_TASK\r\n    todoId: string,\r\n    taskId: string\r\n}\r\n\r\nexport interface IDeleteTaskResponce {\r\n    data: {\r\n        data: object\r\n        messages: Array<string>\r\n        resultCode: number\r\n    }\r\n}\r\nexport const deleteTaskAc = (todoId: string, taskId: string): IDeleteTaskAction => ({type: DELL_TASK, todoId, taskId});\r\n\r\nexport const deleteTaskThunk = (idTodo: string, taskId: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await tasksAPI.deleteTask(idTodo, taskId).then((response: IDeleteTaskResponce) => {\r\n            dispatch(deleteTaskAc(idTodo, taskId))\r\n        })\r\n    }\r\n}\r\n\r\nexport interface IChangeTaskAction {\r\n    type: typeof CHANGE_TASK\r\n    todoId: string,\r\n    taskId: string,\r\n    task: any\r\n}\r\nexport interface IResponceChangeTaskAction {\r\n    data: {\r\n        data: {\r\n            item: ITasks\r\n            messages: Array<string>,\r\n            resultCode: number\r\n        }\r\n    }\r\n    headers: any,\r\n    config: any\r\n    request: any\r\n\r\n}\r\nexport const changeTaskAC = (todoId: string, taskId: string, task: any): IChangeTaskAction => ({\r\n    type: CHANGE_TASK,\r\n    todoId,\r\n    taskId,\r\n    task\r\n});\r\n\r\nexport const changeTaskThunk = (idTodo: string, taskId: string, task: ITasks) => {\r\n    return async (dispatch: Dispatch) => {\r\n        tasksAPI.updateTask(idTodo, taskId, task).then((response: IResponceChangeTaskAction) => {\r\n            dispatch(changeTaskAC(idTodo, taskId, response.data.data.item))\r\n        })\r\n    }\r\n}\r\n\r\nexport interface IChangeFilter {\r\n    type: typeof CHANGE_FILTER\r\n    filter: string\r\n}\r\nexport const changeFilterValueAC = (filter: string): IChangeFilter => ({type: CHANGE_FILTER, filter});\r\n\r\n\r\nexport default reducer;","import React, {ChangeEvent} from 'react';\r\ninterface IProps {\r\n    addItem: (value: string) => void,\r\n    nameValue: string\r\n}\r\ninterface IState {\r\n    value: string\r\n}\r\n\r\nclass AddNewIntemForm extends React.Component<IProps, IState> {\r\n    state: IState = {value: ''}\r\n    onClick = () => {\r\n        this.setState({value: ''})\r\n        this.props.addItem(this.state.value)\r\n    }\r\n\r\n    onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({value: e.currentTarget.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddNewItemBlock\">\r\n                <h4 className=\"nameBlock\">{this.props.nameValue}</h4>\r\n                <div>\r\n                    <input type=\"text\" onChange={this.onChange} value={this.state.value}/>\r\n                    <button onClick={this.onClick}>Add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\nexport default AddNewIntemForm;\r\n\r\n","import React from 'react';\r\nimport {ITasks} from \"./types\";\r\n\r\n\r\ninterface IProps {\r\n    changeTaskInTodolist: (idTodo: string, taskId: string, task: ITasks) => void,\r\n    deleteTask: (idTodo: string, taskId: string) => void,\r\n    updateTaskInTodolist: (idTodo: string, idTask: string, newTitleTask: string) => void,\r\n    idTodo: string,\r\n    task: ITasks,\r\n    idTask: string\r\n}\r\ninterface IState {\r\n    isVisible: boolean,\r\n    priority: Array<string>\r\n}\r\ninterface INewTask {\r\n    title: string,\r\n    priority: number\r\n\r\n}\r\nclass OneTask extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        isVisible: false,\r\n        priority: ['Low', 'Middle', 'Hi', 'Urgently', 'Later']\r\n    }\r\n    setChangeTask = () => {\r\n        this.props.changeTaskInTodolist(this.props.idTodo, this.props.idTask, this.props.task)\r\n        this.setState({isVisible: false})\r\n    }\r\n    updateTaskInTodolist = (e: any) => {\r\n        let priority;\r\n        switch (e.currentTarget[1].value) {\r\n            case \"Low\":\r\n                priority = 0;\r\n                break;\r\n            case \"Middle\":\r\n                priority = 1;\r\n                break;\r\n            case \"Hi\":\r\n                priority = 2;\r\n                break;\r\n            case \"Urgently\":\r\n                priority = 3;\r\n                break;\r\n            case \"Later\":\r\n                priority = 4;\r\n                break;\r\n            default:\r\n                priority = 5;\r\n                break;\r\n        }\r\n\r\n        let newTask: any = {\r\n            title: e.currentTarget[0].value,\r\n            priority: priority\r\n        }\r\n        this.props.updateTaskInTodolist(this.props.idTodo, this.props.idTask, newTask)\r\n    }\r\n    changeStatus = (e: any) => {\r\n        let value;\r\n        if (e.currentTarget.checked) {\r\n            value = 2;\r\n        } else {\r\n            value = 1;\r\n        }\r\n        let task: any = {...this.props.task, status: value}\r\n        this.props.changeTaskInTodolist(this.props.idTodo, this.props.idTask, task)\r\n\r\n    }\r\n\r\n    render() {\r\n        let priority;\r\n        switch (this.props.task.priority) {\r\n            case 0:\r\n                priority = \"Low\";\r\n                break;\r\n            case 1:\r\n                priority = \"Middle\";\r\n                break;\r\n            case 2:\r\n                priority = \"Hi\";\r\n                break;\r\n            case 3:\r\n                priority = \"Urgently\";\r\n                break;\r\n            case 4:\r\n                priority = \"Later\";\r\n                break;\r\n            default:\r\n                priority = 'Server error';\r\n                break;\r\n        }\r\n        return (\r\n            <div className=\"OneTask\">\r\n                {this.state.isVisible ?\r\n                    <div>\r\n                        <form onChange={this.updateTaskInTodolist} className=\"form\">\r\n                            <p>Title:</p> <input autoFocus={true} value={this.props.task.title}/>\r\n                            <div>\r\n                                <p>Priority:</p><select value={priority}>{this.state.priority.map((priority, idx) => <option\r\n                                    key={idx}>{priority}</option>)}</select>\r\n                                <button onClick={this.setChangeTask}>EDIT</button>\r\n                            </div>\r\n                        </form>\r\n                    </div> :\r\n\r\n                    <div className=\"OneTaskBlock\" onDoubleClick={() => this.setState({isVisible: true})}><input\r\n                        checked={this.props.task.status === 2 ? true : false} onChange={this.changeStatus}\r\n                        type=\"checkbox\"/><p>Title:</p> {this.props.task.title + \" \"}\r\n                        <div>\r\n                            <p>Priority:</p> {priority}\r\n                        <button onClick={() => this.props.deleteTask(this.props.idTodo, this.props.idTask)}>x</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default OneTask;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport OneTask from \"./OneTask\";\r\nimport {ITasks} from \"./types\";\r\n\r\ninterface IProps{\r\n    changeTaskInTodolist:(idTodo:string, taskId:string, task:ITasks)=>void,\r\n    deleteTask:(idTodo:string, taskId:string)=>void,\r\n    updateTaskInTodolist:(idTodo:string, idTask:string, newTitleTask:string)=>void,\r\n    idTodo:string,\r\n    tasks:Array<ITasks>\r\n}\r\n\r\nclass ShowTasks extends React.Component<IProps> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.tasks.map(t => {\r\n                    return <OneTask  deleteTask={this.props.deleteTask} changeTaskInTodolist={this.props.changeTaskInTodolist}\r\n                                    updateTaskInTodolist={this.props.updateTaskInTodolist} idTodo={this.props.idTodo}\r\n                                    task={t} idTask={t.id}/>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ShowTasks;","import React from 'react';\r\n\r\ninterface IProps{\r\n    filterValue:string,\r\n    changeFilterValue:(newFilterValue:any)=>void\r\n}\r\n\r\nclass Footer extends React.Component<IProps> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className={this.props.filterValue===\"All\"?'All':''} onClick={this.props.changeFilterValue} value={\"All\"}>All</button>\r\n                <button className={this.props.filterValue===\"Completed\"?'Completed':''} onClick={this.props.changeFilterValue} value={\"Completed\"}>Completed</button>\r\n                <button className={this.props.filterValue===\"Active\"?'Active':''} onClick={this.props.changeFilterValue} value={\"Active\"}>Active</button>\r\n                <button className={this.props.filterValue===\"New\"?'New':''} onClick={this.props.changeFilterValue} value={\"New\"}>New</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport {ITasks, ITodolist} from \"./types\";\r\nimport TodolistTitle from \"./TodolistTitle\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addTasksThunk, changeFilterValueAC, changeTaskAC, changeTaskThunk, changeTodolistTitleThunk, changeTodoTitleAC,\r\n    deleteTaskThunk,\r\n    deleteTodolistThunk,\r\n    getTasksThunk\r\n} from \"./redux/reducer\";\r\nimport AddNewIntemForm from \"./ui/AddNewIntemForm\";\r\nimport ShowTasks from \"./ShowTasks\";\r\nimport Footer from \"./Footer\";\r\n\r\ninterface IProps {\r\n    id: string,\r\n    title: string,\r\n    tasks: Array<ITasks>\r\n}\r\ninterface IMapStateToProps {\r\n    todolists: Array<ITodolist>,\r\n    filterValue:string\r\n}\r\n\r\ninterface IMapDispatchToProps {\r\n    dellTodo: (id: string) => void,\r\n    updateTodolistTitleServer: (id: string, title: string) => void,\r\n    updateTodolistTitleLocal: (id: string, title: string) => void,\r\n    setTasks: (idTodolist: string, tasks: Array<ITasks>) => void,\r\n    addTaskInTodolist: (todoId: string, task: string) => void,\r\n    deleteTask: (todoId: string, taskId: string) => void,\r\n    updateTaskLocal: (idTodo: string, idTask: string, title: string) => void,\r\n    setTaskInCurrentTodoServer: (idTodo: string, idTask: string, task: ITasks) => void,\r\n    changeFilter:(filter:string)=>void\r\n}\r\n\r\nclass Todolist extends React.Component<IMapStateToProps & IMapDispatchToProps & IProps> {\r\n    componentDidMount() {\r\n        this.props.setTasks(this.props.id, this.props.tasks)\r\n    }\r\n\r\n    updateTodoTitle = (id: string, title: string) => {\r\n        this.props.updateTodolistTitleServer(id, title)\r\n    }\r\n    changeTodoTitle = (id: string, title: string) => {\r\n        this.props.updateTodolistTitleLocal(id, title)\r\n    }\r\n    deleteTodolist = (idTodo: string) => {\r\n        this.props.dellTodo(idTodo)\r\n    }\r\n\r\n    addNewTask = (newTask: string) => {\r\n        this.props.addTaskInTodolist(this.props.id, newTask)\r\n    }\r\n    deleteTask = (idTodo:string, taskId:string) => {\r\n        this.props.deleteTask(idTodo, taskId)\r\n    }\r\n\r\n    changeTaskInTodolist = (idTodo:string, taskId:string, task:ITasks) => {\r\n        this.props.setTaskInCurrentTodoServer(idTodo, taskId, task)\r\n    }\r\n    updateTaskInTodolist = (idTodo:string, idTask:string, newTitleTask:string) => {\r\n        this.props.updateTaskLocal(idTodo, idTask, newTitleTask);\r\n    }\r\n\r\n    changeFilterValue = (newFilterValue:any) => {\r\n        this.props.changeFilter(newFilterValue.currentTarget.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <TodolistTitle changeTodoTitle={this.changeTodoTitle} updateTodoTitle={this.updateTodoTitle}\r\n                               idTodo={this.props.id} deleteTodolist={this.deleteTodolist} title={this.props.title}/>\r\n                <AddNewIntemForm nameValue=\"Add Task\" addItem={this.addNewTask}/>\r\n                <ShowTasks changeTaskInTodolist={this.changeTaskInTodolist}\r\n                           updateTaskInTodolist={this.updateTaskInTodolist} deleteTask={this.deleteTask}\r\n                           idTodo={this.props.id} tasks={this.props.tasks.filter(t => {\r\n                    if (this.props.filterValue === \"All\") {\r\n                        return true\r\n                    } else if (this.props.filterValue === \"Completed\") {\r\n                        return t.status === 2;\r\n                    } else if (this.props.filterValue === \"Active\") {\r\n                        return t.status === 1;\r\n                    } else {\r\n                        return t.status === 0\r\n                    }\r\n                })}/>\r\n                <Footer filterValue={this.props.filterValue} changeFilterValue={this.changeFilterValue}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): IMapStateToProps => {\r\n    return {\r\n        todolists: state.todo.todolists,\r\n        filterValue: state.todo.filterValue\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): IMapDispatchToProps => {\r\n    return {\r\n        setTasks(idTodolist, tasks) {\r\n            dispatch(getTasksThunk(idTodolist, tasks))\r\n        },\r\n        dellTodo(id){\r\n            dispatch(deleteTodolistThunk(id))\r\n        },\r\n        updateTodolistTitleServer(idTodo, title){\r\n            dispatch(changeTodolistTitleThunk(idTodo, title))\r\n        },\r\n        updateTodolistTitleLocal(idTodo, title){\r\n            dispatch(changeTodoTitleAC(idTodo, title))\r\n        },\r\n        addTaskInTodolist(todoId, task){\r\n            dispatch(addTasksThunk(todoId, task))\r\n        },\r\n        deleteTask(todoId, taskId){\r\n            dispatch(deleteTaskThunk(todoId, taskId))\r\n        },\r\n        updateTaskLocal(idTodo, idTask, title){\r\n            dispatch(changeTaskAC(idTodo, idTask, title))\r\n        },\r\n        setTaskInCurrentTodoServer(idTodo, idTask, task){\r\n            dispatch(changeTaskThunk(idTodo, idTask, task))\r\n        },\r\n        changeFilter(filter){\r\n            dispatch(changeFilterValueAC(filter))\r\n        },\r\n    }\r\n}\r\n\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(Todolist);\r\nexport default ConnectedApp;","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./Todolist\";\r\nimport {ITodolist} from \"./types\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport AddNewIntemForm from \"./ui/AddNewIntemForm\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addTodolistThunk, INewTodolist, setTodolistThunk} from \"./redux/reducer\"\r\n\r\n\r\ninterface IMapStateToProps {\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\ninterface IMapDispatchToProps {\r\n    getTodolists: () => void,\r\n    addTodo: (newTodolist: string) => void\r\n}\r\n\r\nclass App extends React.Component<IMapStateToProps & IMapDispatchToProps> {\r\n    componentDidMount() {\r\n        this.props.getTodolists()\r\n    }\r\n\r\n    addNewTodo = (newTitle: string) => {\r\n        this.props.addTodo(newTitle);\r\n    }\r\n    render() {\r\n        let todolists = this.props.todolists.map(function (tl) {\r\n            return <Todolist id={tl.id} title={tl.title} tasks={tl.tasks}/>\r\n        })\r\n        return (\r\n            <>\r\n            <div className=\"AddNewTodolist\">\r\n                <AddNewIntemForm nameValue=\"Add Todolist\"  addItem={this.addNewTodo}/>\r\n            </div>\r\n            <div className=\"App\">\r\n                {todolists}\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): IMapStateToProps => {\r\n    return {\r\n        todolists: state.todo.todolists\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any): IMapDispatchToProps => ({\r\n    getTodolists: () => {\r\n        dispatch(setTodolistThunk());\r\n    },\r\n    addTodo(newTodolist){\r\n        dispatch(addTodolistThunk(newTodolist))\r\n    }\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {createStore, combineReducers,applyMiddleware} from \"redux\"\r\nimport thunk from 'redux-thunk';\r\nimport reducer from \"./reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    todo: reducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}